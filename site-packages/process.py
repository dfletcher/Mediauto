#!/usr/bin/env python

import threading

class MediautoProcess(threading.Thread):
  def __init__(self, upi):
    self._upi = upi
    self._progress = 0.0
    self._eta = None
    self._speed = None
    threading.Thread.__init__(self)
  def upi(self): return self._upi
  def type(self): return 'UNKNOWN_TYPE'
  def depends(self): return [ ]
  def progress(self): return self._progress
  def eta(self): return self._eta
  def speed(self): return self._speed
  def run(self): pass
  def set_progress(self, _progress):
    self._progress = _progress
  def set_eta(self, _eta): self._eta = _eta
  def set_speed(self, _speed): self._speed = _speed

class MediautoProcessor:
  def __init__(self):
    self._processtypes = {}
    self._queue = []
    self._completed = []
  def declare(self, process):
    self._processtypes[process.type()] = process
    return self
  def start(self, process):
    p = self._processtypes[process]
    p.start()
    print('start process: %s' % process)
    return self
  def finish(self, process):
    self._completed.append(process.type())
  def join(self, process):
    # temporary hack
    p = self._processtypes[process]
    p.join()
    return self
  def list(self):
    return self._processtypes.keys()
  def get(self, process):
    return self._processtypes[process]
  def queue(self, processtype):
    self._queue.insert(0, processtype)
    return self
  def select(self):
    for entry in range(len(self._queue)):
      process = self._queue[entry]
      p = self._processtypes[process]
      havealldeps = True
      for dep in p.depends():
        if not dep in self._completed:
          havealldeps = False
          break
      if havealldeps:
        return self._queue.pop(entry)
    return None
  def count(self):
    return len(self._queue)
